Client Side rendering =>

html being injected into the DOM on the client (browser). Initially we get empty html and then the contents are populated by running the js files. Js files are updating the DOM content on the browser.

Client-side rendering (CSR) is a modern technique used in web development where the rendering of a webpage is performed in the browser using JavaScript. Instead of the server sending a fully rendered HTML page to the client
 
Good example of CSR - React 

Browser --> website.com --> CDN
       <------ index.html (generally blank html page, have script tags pointing to js files and link tag pointing to css files)
White Page
        -------> request for js files
        <------ chunk.js
JS Runs
Page Renders

Let’s see a react project in action =>

Initialise a react project
    - npm create vite@latest

Add dependencies
    - npm i

Start the project
    - npm run build

Serve the project
    - cd dist/
    - serve

Open the network tab and notice how the initial HTML file doesn’t have any content

This means that the JS runs and actually populates / renders the contents on the page
React (or CSR) makes your life as a developer easy. You write components, JS renders them to the DOM.

Downsides?
    - Not SEO optimised
    - User sees a flash before the page renders
    - Waterfalling problem


All the things are happening sequentially

Browser --> website.com --> CDN
       <------ index.html (generally blank html page, have script tags pointing to js files and link tag pointing to css files)
White Page
        -------> request for js files
        <------ chunk.js
JS Runs
Page Renders with loader
Browser        
        ------> Get my details fom server (backend request)
        <------- Server

Page renders with the user details

--------------------------------------------

Server side rendering =>

When the rendering process (converting JS components to HTML) happens on the server, it’s called SSR. 

Browser --> website.com --> Next Server --> DB

Page Renders  <-- index.html is populated 
with the user 
details

Request Sent from Browser ->
Next server identify the user by extracting the token, hit the DB and do the heavy lifting of pre-filling HTML and fetch the data from DB and server side renders the Page and converts it to HTML and return everything on the very first requested index.html.The BE pre-populated it and send to the Frontend.

Why SSR?
    - SEO Optimisations
    - Gets rid of the waterfalling problem
    - No white flash before you see content


Try creating a NextJS app and notice the HTML file you receive is populated =>

Create next app -> npx create-next-app
Build the project -> npm run build
Start the NEXT Server -> npm run start

Notice the initial HTML page is populated 

Downsides of SSR?
    - Expensive since every request needs to render on the server
    - Harder to scale, you can’t cache to CDNs

Unlike react where rendering logic runs on browser, nextjs render everything on server, very expensive.

-----------------------------------------------------

Static site generation =>

Ref https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating

If a page uses Static Generation, the page HTML is generated at build time. That means in production, the page HTML is generated when you run next build. This HTML will then be reused on each request. It can be cached by a CDN.

Why?

If you use static site generation, you can defer the expensive operation of rendering a page to the build time so it only happens once. 

How?

Let’s say you have an endpoint that gives you all the global todos of an app.
By global todos  we mean that they are the same for all users, and hence this page can be statically generated.

https://sum-server.100xdevs.com/todos


Create a fresh next project
Create todos/page.tsx

export default async function Blog() {
    const res = await fetch('https://sum-server.100xdevs.com/todos')

    const data = await res.json();
    const todos = data.todos;

    console.log("todos", );
    return <div>
        {todos.map((todo: any) => <div key={todo.id}>
            {todo.title}
            {todo.description}
        </div>)}
    </div>
    
}

Try updating the fetch requests

Clear cache every 10 seconds ->

const res = await fetch('https://sum-server.100xdevs.com/todos', {
    next: { revalidate: 10 }
});

Clear cache in a next action ->

import { revalidateTag } from 'next/cache'

const res = await fetch('https://sum-server.100xdevs.com/todos', { next: { tags: ['todos'] } })

---

'use server'
 
import { revalidateTag } from 'next/cache'
 
export default async function revalidate() {
  revalidateTag('todos')
}

--------------------------------------------------------

If we have to render an operation heavy page (render too many things), if we are doing it in Next JS, as many people ask for this page, rendering happens on the server for all of these pages. On the server we render too many things (similar things) again and again, which is very expensive. So If we have like an static page (that doesn't change and is same for every user), we can render it once during build time on server and serve it to every user when they ask for it.

So if we know certain pages are going to be same for every user, instead of rendering again and again, we can render it once on the server during build time (npm run build) and pre-generate those static pages.

Dynamic Page => the page content changes / varies for user to user.
Static Page => the page content remains the same for every user.

SSG -> makes sense if the page is not changing often.(ex - Blogs Website / Dailycode Platform)

// Todo: How to statically generate all pages in dailycode platform. Statically generate dynamic routes? The whole dailycode platform to be SSG.

we can easily statically generate constant routes (/route_name), but not "/asdghsl-234" dynamic routes is difficult, need to research.