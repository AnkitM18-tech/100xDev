What are monorepos ?

As the name suggests, a single repository (on github lets say) that holds all your frontend, backend, devops code.

Few repos that use monorepos are - 

https://github.com/code100x/daily-code
https://github.com/calcom/cal.com

Do you need to know them very well as a full stack engineer ?

Not exactly. Most of the times they are setup in the project already by the dev tools guy and you just need to follow the right practices.

Good to know how to set one up from scratch though

Why Monorepos?
Why not Simple folders?
Why cant I just store services (backend, frontend etc) in various top level folders?

You can, and you should if your - 
    - Services are highly decoupled (dont share any code)
    - Services don’t depend on each other.
        - For eg - A codebase which has a Golang service and a JS service


Why monorepos?
    - Shared Code Reuse
    - Enhanced Collaboration
    - Optimized Builds and CI/CD: Tools like TurboRepo offer smart caching and task execution strategies that can significantly reduce build and testing times.
    - Centralized Tooling and Configuration: Managing build tools, linters, formatters, and other configurations is simpler in a monorepo because you can have a single set of tools for the entire project. 


Common monorepo framework in Node.js =>

Lerna - https://lerna.js.org/
nx - https://github.com/nrwl/nx
Turborepo - https://turbo.build/ — Not exactly a monorepo framework
Yarn/npm workspaces - https://classic.yarnpkg.com/lang/en/docs/workspaces/
 
We’ll be going through turborepo since it’s the most relevant one today and provides more things (like build optimisations) that others don’t

History of Turborepo =>

Created by Jared Palmer
In December 2021 Acquired/aqui-hired by Vercel
Mild speculation/came from a random source - Pretty hefty dealp
They’ve built a bunch of products, Turborepo is the most used one

Build system vs Build system orchestrator vs Monorepo framework =>

Build System =>
    - A build system automates the process of transforming source code written by developers into binary code that can be executed by a computer. For JavaScript and TypeScript projects, this process can include transpilation (converting TS to JS), bundling (combining multiple files into fewer files), minification (reducing file size), and more. A build system might also handle running tests, linting, and deploying applications.

Build System Orchestrator =>
    - TurboRepo acts more like a build system orchestrator rather than a direct build system itself. It doesn't directly perform tasks like transpilation, bundling, minification, or running tests. Instead, TurboRepo allows you to define tasks in your monorepo that call other tools (which are the actual build systems) to perform these actions. 

    - Turborepo helps in dependency management during builds, caching during builds. - using a single build command, no need to build separately.

    - These tools can include anything from tsc, vite etc

Monorepo Framework =>
    - A monorepo framework provides tools and conventions for managing projects that contain multiple packages or applications within a single repository (monorepo). This includes dependency management between packages, workspace configuration.

Turborepo as a build system orchestrator =>

    - Turborepo is a build system orchestrator . 
    - The key feature of TurboRepo is its ability to manage and optimize the execution of these tasks across your monorepo. It does this through:
    - Caching: TurboRepo caches the outputs of tasks, so if you run a task and then run it again without changing any of the inputs (source files, dependencies, configuration), TurboRepo can skip the actual execution and provide the output from the cache. This can significantly speed up build times, especially in continuous integration environments.
    - Parallelization: It can run independent tasks in parallel, making efficient use of your machine's resources. This reduces the overall time needed to complete all tasks in your project.
    - Dependency Graph Awareness: TurboRepo understands the dependency graph of your monorepo. This means it knows which packages depend on each other and can ensure tasks are run in the correct order.

----

Let’s initialize a simple Turborepo 
    - Ref https://turbo.build/repo/docs
Initialize a Turborepo
    - npx create-turbo@latest
Select npm workspaces as the monorepo framework

If it is taking a long time for you, you can clone this starter from https://github.com/100xdevs-cohort-2/week-16-1 and run npm install inside the root folder

Explore the folder structure =>

There are 5 modules in our project :-

End user apps (websites/core backend) - we can put other react, express etc apps also here
    - apps/web - A Next.js website
    - apps/docs - A Docs website that has all the documentation related to your project

Helper packages
    - packages/ui - UI packages 
    - packages/typescript-config - Shareable TS configuration
    - packages/eslint-config - Shareable ESLine configuration 

----

There are many things which can not be done in Next, so as there are other repos / helper repos as well, we can use monorepos here.

Without Monorepos =>

linting happens sequentially, then we have to build it sequentially the shared one going first, then tests get run at the end sequentially.

The slowest possible way to run these tasks. Each task needs to wait for the previous one to finish before it can start. To improve this we need a tool that can multitask. i.e - Monorepos / Turborepo Orchestrator.

With Monorepos =>

Both lint and test run immediately, because they have no dependency specified in "turbo.json".
The build task inside shared completes first, then web and docs build afterwards. Parallelization is possible in turbo repos, which makes it faster for these tasks.

----

Let’s try to run the project =>

In the root folder, run 
    - npm run dev

You will notice two websites running on =>

localhost:3000
localhost:3001
 
This means we have a single repo which has multiple projects which share code from packages/ui

Exploring root package.json =>

scripts -->

This represents what command runs when you run -
    - npm run build
    - npm run dev
    - npm run lint

turbo build goes into all packages and apps and runs `npm run build` inside them (provided they have it)

Same for dev and lint

root package.json =>

// turbo build system

"scripts": {
    "build": "turbo build",
    "dev": "turbo dev",
    "lint": "turbo lint",
    "format": "prettier --write \"**/*.{ts,tsx,md}\""
}

// npm workspaces

"workspaces": [
    "apps/*",
    "packages/*"
]

they start at different ports => 3000 and 3001 
"next dev --port 3000" - in web package.json
"next dev --port 3001" - in docs package.json

-----

docker caches the image / layers => .iso files with file system and everything
turborepo caches the files / assets in .next / .cache folder => .js files

monorepo framework - turborepo handles builds, linting and caching => it knows the dependencies and builds in the correct order and if nothing changed then it can simply return us the cache, no need to build again.

-----

Exploring packages/ui =>

packages/ui/package.json

"name": "@repo/ui", --> name of the package (100x/ui)

"exports": {
    "./button": "./src/button.tsx",
    "./card": "./src/card.tsx",
    "./code": "./src/code.tsx"
}, ---> what all this package exports

if someone is trying to import from this helper package, they can import from the above options.

import {} from "@repo/ui/<the_path_name>"; 

`/code || /button || /card` - <path_name>

 what we can also do is put everything inside an index.ts file and then we can export that one index file.

"exports": {
    "./": "./src/index.ts"
}

index.ts ->

export * from "./card";
export * from "./button";
export * from "./code";


whatever we want to export from ui module we need to mention in "exports" in package.json of ui folder.

the changes we did in the components will be reflected everywhere the components are being used.

also we need to give it in "dependencies" of the apps/web || apps/docs package.json

"dependencies": {
    "@repo/ui": "*", --> doesn't have a numeric version - it means find it in somewhere in this module / package(@repo/ui -- name given)
    "next": "^14.1.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
},

turbo folder =>

This is an interesting folder that was introduced recently. More details here - https://turbo.build/repo/docs/core-concepts/monorepos/code-generation

---

Exploring apps/web =>

1. Dependencies ->
    - It is a simple next.js app. But it uses some UI components from the packages/ui module

2. Exploring package.json ->
    - If you explore package.json of apps/web, you will notice @repo/ui as a dependency

3. Exploring page.tsx ->
    - This is a very big page, let’s try to see the import and usage of the Button component

apps/web/app/page.tsx ->

import styles from "./page.module.css";
import {Button} from "@repo/ui/button"; -- import from packages module.

<Button appName="web" className={styles.button}>
    Click Me !
</Button>

The same Button component can be used by the apps/docs website as well.

we can add or backend, react code inside apps folder as well. the things which actually starts (long running processes) are put in here.

Remote Caching is the main thing turbo-repos provide. For the longest time we don't need it, but if the build time is a matter of concern where we didn't change a certain portion of the code, but still as it is inside a single repo, CI/CD will trigger the build, so turborepos will come into picture here and give the cached files stored somewhere in S3 or somewhere, and we don't need to rebuild the unchanged portion/folder of the code.

Turborepo works if we use pure JS / TS.

----

Let’s add a new page =>

Try adding a new page to /admin to the apps/web next.js website.
It should use a simple Admin component from packages/ui

Steps to follow - 
    - Create a new file admin.tsx inside packages/ui/src
    - Export a simple React component

Add the component to exports in packages/ui/package.json
Create apps/web/app/admin/page.tsx
Export a default component that uses the  @repo/ui/admin component
Run npm run dev (either in root or in apps/web ) and try to see the website
Go to http://localhost:3000/admin

You can also use the packages/ui/turbo/generators to quickly bootstrap a new component

Try running `npx gen react-component` and notice it’ll do step 1, 2, 3 for you in one cli call.

explore turbo folder for more details.

cd to packages/ui => run `npm run generate:component` - this will create the component and export it in package.json as well.


-------

Exploring turbo.json

Ref - https://turbo.build/repo/docs/getting-started/create-new#3-understanding-turbojson

References - https://turbo.build/repo/docs/reference/configuration#globaldependencies


turbo.json => has configuration for turborepos.

    "build": {
      "dependsOn": ["^build"],
      "outputs": [".next/**", "!.next/cache/**"]
    },
    "lint": {
      "dependsOn": ["^lint"]
    },
    "dev": {
      "cache": false, - telling turborepo not to cache the results of the dev script. dev runs a persistent:dev server and produces no output, so there is nothing to cache.
      "persistent": true - letting turbo know this is a long running dev-server, so that turbo can ensure that no other tasks are dependent on it.
    }

these configurations tell turborepos to run npm run build/lint/dev in all apps folder where there is a dev/lint/build script present in package.json when we run npm run build/lint/dev in the root folder which under the hood runs turbo build etc.. . that's how all the mentioned pipelines operate. 


outputs -> is important in case of caching - when we first run `npm run build` it will take some time, then if the files are not changed, the subsequent runs won't take much time to build.

turbo repo understands if nothing changed then no need of rebuilding, so it caches the output in these folders.
eventually when we add more apps like react and node we need tto change it in turbo.json.

down the line when we introduce deploy pipeline and script we need to change it.

By going to the root folder and running `npm install` or `npm i` it will go into each folder and run npm install.(global npm install)

now if we run `npm run dev` then the newly created react-app will also start.

even though we didn't add the @repo/ui in dependencies in the react-app package.json, as we have used it earlier in docs and web, it was already present in the global node_modules, so TS didn't throw any error.

But we should always try to stay consistent and add the required helper packages to our dependencies in package.json everytime we create a new app inside apps folder.always introduce the helper packages in all created apps where we are using it.

------

Adding React projects =>

1. Go to the apps folder
    - cd apps
2. Create a fresh vite app
    - npm create vite@latest

Update package.json to include @repo/ui as a dependency
    - "@repo/ui": "*",

Run npm install in the root folder
    - cd ..
    - npm install

Run npm run dev
    - npm run dev

- Try importing something from the ui package and rendering it
- Add a turbo.json to the react folder to override the outputs object of this module. 
Ref https://turbo.build/repo/docs/core-concepts/monorepos/configuring-workspaces

{
  "extends": ["//"],
  "pipeline": {
    "build": {
      "outputs": ["dist/**"]
    }
  }
}

---

Caching in Turborepo =>

Ref - https://turbo.build/repo/docs/getting-started/create-new#using-the-cache

    - One of the big things that make turborepo fast and efficient is caching
    - It watches your files across builds and returns the cached response of builds if no files have changed.
    - Try running npm run build more than once and you’ll see the second times it happens extremely fast.
    - You can also explore the node_modules/.cache/turbo folder to see the zipped cache files and unzip them using
    -  tar --use-compress-program=unzstd -xvf name.tar.zst

----

Adding a Node.js app =>

Everything else remains the same (Create a new project, add typescript, add express…)

The only thing that’s different is that tsc doesn’t perform great with turborepo

You can use either tsup or esbuild for building your backend application

- Create apps/backend
- Initialize empty ts repo
npm init -y
npx tsc --init

Use base tsconfig  (Ref - https://github.com/vercel/turbo/blob/main/examples/kitchen-sink/apps/api/tsconfig.json )

{
  "extends": "@repo/typescript-config/base.json",
  "compilerOptions": {
    "lib": ["ES2015"],
    "module": "CommonJS",
    "outDir": "./dist",
  },
  "exclude": ["node_modules"],
  "include": ["."]
}

Add dependencies
    - npm i express @types/express

Add src/index.ts =>

import express from "express";

const app = express()

app.get("/", (req, res) => {
    res.json({
        message: "hello world"
    });
})

Update turbo.json =>

{
  "extends": ["//"],
  "pipeline": {
    "build": {
      "outputs": ["dist/**"]
    }
  }
}

Install esbuild
    - npm install esbuild

Add build script to package.json
    - "build": "esbuild src/index.ts --platform=node --bundle --outdir=dist"


we don't have to put the name as `@repo/<name>` for the package name, though it's a good practice to do it like this. since we are not pushing it to npmjs, it generally doesn't matter.

for the tsconfig.json file we should extend from the typescript-config folder. we should put all the sharable configs inside this folder in packages/typescript-config.

for the overriding part of tsconfig, we can take reference from examples of turbo.build. -> kitchen sink example


----

Adding a common module =>

A lot of times you need a module that can be shared by both frontend and backend apps
 
Initialize a packages/common module
    - cd packages
    - mkdir common

Initialize an empty node.js project
    - npm init -y
    - npx tsc --init

Change the name to @repo/common
    Export a few things from src/index.ts
    - export const NUMBER = 1;

Add it to the package.json of various apps (next app/react app/node app)
    - "@repo/common": "*",

Import it in there and try to use it
Run npm install in root folder and see if it works as expected

everytime you create a package or apps, do a global npm install, so that the files can be stored in node_modules.

SyntaxError: Unexpected token 'export' - problem with tsc while importing packages around apps.

so we can use esbuild / tsup instead.

tsc will work fine in the backend app unless we import helper packages, so tsup / esbuild is better in this.

----

What is authentication?

Authentication is the process of letting users signup/signin into websites via username / password or using SSO (single sign on)

Authentication using jwt + localstorage

Sign Up => send data to server => goes to DB and make an entry --> verification mail send to email (additional step)

Sign In => send data to server => server checks for correctness of data and if the user is verified => then returns an jwt token to user for the session connection, which gets stored in browser's localstorage.

Auth Requests => sends jwt token in the authorization header in the subsequent requests to the server => server decodes jwt from header and fetches requested data from DB after verification.

----

Authentication using cookies =>

What are cookies?

Cookies in web development are small pieces of data sent from a website and stored on the user's computer by the user's web browser while the user is browsing. They are designed to be a reliable mechanism for websites to remember things (very similar to local storage)

    - Session Management: Cookies allow websites to identify users and track their individual session states across multiple pages or visits.
    - Personalization: Websites use cookies to personalize content and ads. For instance, cookies might store information about a user's preferences, allowing the site to tailor content or advertisements to those interests.
    - Tracking: Cookies can track users across websites, providing insights into browsing behavior. This information can be used for analytics purposes, to improve website functionality, or for advertising targeting.
    - Security: Secure cookies can be used to enhance the security of a website by ensuring that the transmission of information is only done over an encrypted connection, helping to prevent unauthorized access to user data.

We will be focussing on point 4

Why not local storage?

Cookies and LocalStorage both provide ways to store data on the client-side, but they serve different purposes and have different characteristics.

    - Cookies are send with every request to the website (by the browser) (you don’t have to explicitly add a header to the fetch call)

This point becomes super important in Next.js, we’ll see later why - can't do LocalStorage in Next.js because it uses server side rendering and the first request is sent by the browser itself and we can't set the jwt in authorization in header in the first ever pre-rendered request. So the server won't be able to identify you and give access. So we have to send a cookie in the first pre-rendered request. Cookies can be sent on first pre-rendered request.

We can't use jwt + localstorage based authentication in server side rendered apps. Because the authorization header can not be  set in the first pre-rendered request.We have to use cookie based authentication.

In Client side rendering it is not a problem. We can send the authorization header later on.

Ref - https://github.com/100xdevs-cohort-2/paytm/blob/complete-solution/frontend/src/pages/SendMoney.jsx#L45

    - Cookies can have an expiry attached to them
    - Cookies can be restricted to only https and to certain domains
 
You don’t need to explicitly set the cookie header in the browser. It’s automatically set by the browser in every request.

On sign in server will return a cookie which will be set in the browser and sent on subsequent requests by default.

-----

Properties of cookies ->

Types of cookies
    - Persistent - Stay even if u close the window
    - Session - Go away after the window closes
    - Secure - Sent only over secure, encrypted connections (HTTPS).

Properties of cookies
    - HttpOnly - Can not be accessed by client side scripts     - can't do like localStorage.get("token") with cookies.
    - SameSite - Ensures cookies are not send on cross origin requests
        - Strict
        - Lax - Only GET requests and on top level navigation - default
        - None

Ref - https://portswigger.net/web-security/csrf/bypassing-samesite-restrictions#:~:text=SameSite is a browser security,leaks%2C and some CORS exploits.

Domains - You can also specify what all domains should the cookie be sent from.

While using cookies, we have to be very careful to restrict domains, use the SameSite attribute to secure our website from attacks or forgery. Since cookies are sent by default any other malicious site can make a forgery request to our site and attack it.

Browser ---> Server => the server won't send the jwt, it will set-cookie and the cookie will be sent on subsequent requests.

On sign in we will get back the Set-Cookie response header from the server.

CSRF attacks =>

Cross site request forgery attacks were super common because of cookies and hence the SameSite attribute was introduced

SameSite: none
    - cookie goes from both legit and malicious website

SameSite: Strict
    - cookie goes from legit and doesn't go from malicious website
    - But there’s a problem 
        - If we have affiliate partners and there is a link provided there for our site, with SameSite: strict, then after clicking on that link it will redirect us to our site,even if we are logged in but we are coming from a referrer site, cookies don't go.
    
SameSite: Lax - By default
    - cookie goes from legit site and cookie goes from other affiliate sites on top level navigation, Only GET requests. as long as it doesn't send POST request to change the data it allows.

    - in between Strict and None => allows top level navigation -> allows cookie even if we are referred from other affiliate sites. If a different site is doing top level navigation to our site, allow cookies to go.

----

Example in express (Backend)=>

Initialize an empty TS project
    npm init -y
    npx tsc --init

Update rootDir and outDir
    "rootDir": "./src"
    "outDir": "./dist"

Add required libraries
    import express from "express";
    import cookieParser from "cookie-parser";
    import cors from "cors";
    import jwt, { JwtPayload } from "jsonwebtoken";
    import path from "path";

Initialize express app, add middlewares
    const app = express();
    app.use(cookieParser());
    app.use(express.json());
    app.use(cors({
        credentials: true,
        origin: "http://localhost:5173"
    }));

Add a dummy signin endpoint
    app.post("/signin", (req, res) => {
        const email = req.body.email;
        const password = req.body.password;
        // do db validations, fetch id of user from db
        const token = jwt.sign({
            id: 1
        }, JWT_SECRET);
        res.cookie("token", token);
        res.send("Logged in!");
    });

Add a protected backend route
    app.get("/user", (req, res) => {
        const token = req.cookies.token;
        const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
        // Get email of the user from the database
        res.send({
            userId: decoded.id
        })
    });

Add a logout route
    app.post("/logout", (req, res) => {
        res.cookie("token", "ads");
        res.json({
            message: "Logged out!"
        })
    });

Listen on port 3000
    app.listen(3000);

Code - https://github.com/100xdevs-cohort-2/week-16-auth-1

----
Frontend in React =>

Initialize an empty react project

Add a signin page ->

    import { useState } from "react"
    import { BACKEND_URL } from "../config"
    import axios from "axios"

    export const Signin = () => {
        const [username, setUsername] = useState("")
        const [password, setPassword] = useState("")

        return <div>
            <input onChange={(e) => {
                setUsername(e.target.value);
            }} type="text" placeholder="username" />
            <input onChange={(e) => {
                setPassword(e.target.value);
            }} type="password" placeholder="password" />
            <button onClick={async () => {
                await axios.post(`${BACKEND_URL}/signin`, {
                    username,
                    password
                }, {
                    withCredentials: true,
                });
                alert("you are logged in")
            }}>Submit</button>
        </div>
    }

Add a user page ->

    import axios from "axios";
    import { useEffect, useState } from "react"
    import { BACKEND_URL } from "../config";

    export const User = () => {
        const [userData, setUserData] = useState();

        useEffect(() => {
            axios.get(`${BACKEND_URL}/user`, {
                withCredentials: true,
            })
                .then(res => {
                    setUserData(res.data);
                })
        }, []);

        return <div>
            You're id is {userData?.userId}
            <br /><br />
            <button onClick={() => {
                axios.post(`${BACKEND_URL}/logout`, {}, {
                    withCredentials: true,
                })
            }}>Logout</button>
        </div>
    }

Add routing ->

    import './App.css'

    import { BrowserRouter, Route, Routes } from "react-router-dom";
    import { Signup } from './components/Signup';
    import { Signin } from './components/Signin';
    import { User } from './components/User';

    function App() {
        return (
            <BrowserRouter>
            <Routes>
                <Route path={"/signup"} element={<Signup />} />
                <Route path={"/signin"} element={<Signin />} />
                <Route path={"/user"} element={<User />} />
            </Routes>
            </BrowserRouter>
        )
    }

    export default App

Code - https://github.com/100xdevs-cohort-2/week-16-auth-1

----

Frontend from express

Add an index.html file in src folder of backend ->

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Login Page</title>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    </head>
    <body>

    <input id="username" type="text" placeholder="username" />
    <input id="password" type="password" placeholder="password" />
    <button id="loginButton">Submit</button>
    <button id="logoutButton">Logout</button>
    <div id="userData"></div>


    <script>

        document.getElementById('loginButton').addEventListener('click', async () => {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            try {
                await axios.post(`/signin`, {
                    username,
                    password
                });
                alert("You are logged in");
            } catch (error) {
                console.error('Login failed:', error);
                alert("Login failed");
            }
        });

        document.getElementById('logoutButton').addEventListener('click', () => {
            axios.post(`/logout`, {}, {
                withCredentials: true,
            }).then(() => {
                console.log('Logged out successfully.');
            }).catch(error => {
                console.error('Logout failed:', error);
            });
        });

        function fetchUserData() {
            axios.get(`/user`, {
                withCredentials: true,
            }).then(response => {
                const userData = response.data;
                displayUserData(userData);
            }).catch(error => {
                console.error('Failed to fetch user data:', error);
            });
        }

        function displayUserData(userData) {
            const userDataDiv = document.getElementById('userData');
            // Example: Assumes userData contains a 'name' and 'email'. Adapt based on your actual user data structure.
            userDataDiv.innerHTML = `<p>Your id is: ${userData.userId}</p>`;
        }
        fetchUserData();
    </script>

    </body>
    </html>

Add a route that sends this html file ->

    app.get("/", (req, res) => {
        res.sendFile(path.join(__dirname, "../src/index.html"))
    })

Remove credentials from cors ->
    app.use(cors());

----














