Why OpenAPI Spec =>

When you create backend, it’s very hard for other people to know the exact shape of your routes

Wouldn’t it be nice if you could describe, in a single file the shape of your routes?

For example - https://sum-server.100xdevs.com/todo?id=1

If you have this single long file that lists all your routes, you could =>

- Auto generate documentation pages (Ref https://binance-docs.github.io/apidocs/spot/en/#query-current-order-count-usage-trade)
- Auto generate clients in various languages (Java, JS, Go…)
- Let the world look at your API routes shape without actually opening your code
- Let AIs know how to hit your APIs in a single file, without sharing your code with the AI

----

What is the OpenAPI Spec ? =>

The OpenAPI Specification (OAS) is a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of a service without access to source code, additional documentation, or network traffic inspection. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with minimal implementation logic.
 
Developed initially by Swagger, and later donated to the OpenAPI Initiative under the Linux Foundation, the OpenAPI Specification has become a widely adopted industry standard for defining and using APIs.
 
Good reference file - https://github.com/knadh/listmonk/blob/1bf7e362bf6bee23e5e2e15f8c7cf12e23860df6/docs/swagger/collections.yaml

----

Parts of the spec file --->

For a simple server

server.js =>
```
import express from 'express';

const app = express();
const port = 3000;

app.use(express.json());

let users = [
    { id: 1, name: 'John Doe' },
    { id: 2, name: 'Jane Doe' }
];

app.get('/users', (req, res) => {
    const { name } = req.query;

    if (name) {
        const filteredUsers = users.filter(user => user.name.toLowerCase().includes(name.toLowerCase()));
        res.json(filteredUsers);
    } else {
        res.json(users);
    }
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
```

OpenAPI Spec =>

```
openapi: 3.0.0
info:
  title: User API
  description: API to manage users
  version: "1.0.0"
servers:
  - url: http://localhost:3000
paths:
  /users:
    get:
      summary: Get a list of users
      description: Retrieves a list of users, optionally filtered by name.
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Name filter for user lookup.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the user.
        name:
          type: string
          description: The name of the user.
      required:
        - id
        - name
```

Try Visiting - http://localhost:3000/users?name=John Doe,a,http://localhost:3000/users?name=John%20Doe

-----

How to create a spec => (use the approach more suited for the usecase)
    - Write it by hand (bad, but still happens)
    - Auto generate it from your code 
        - Easy in languages that have deep types like Rust
        - Slightly harder in languages like Go/JS (some verbose comments we have to write before the routes, which will then generate the openapispec file)
        - Node.js has some libraries/codebases that let you do it
            - With express - https://www.npmjs.com/package/express-openapi (highly verbose)
            - Without express - https://github.com/lukeautry/tsoa (Cohort 1 video)
        - Hono has a native implementation with zod - https://hono.dev/snippets/zod-openapi
 
We’ll be going through d, but we’ve covered c.ii in Cohort 1

----

Hono + Zod + OpenAPI =>

Ref https://hono.dev/snippets/zod-openapi
 
import { z } from '@hono/zod-openapi'
import { createRoute } from '@hono/zod-openapi'
import { OpenAPIHono } from '@hono/zod-openapi'

const ParamsSchema = z.object({
  id: z
    .string()
    .min(3)
    .openapi({
      param: {
        name: 'id',
        in: 'path',
      },
      example: '1212121',
    }),
})

const UserSchema = z
  .object({
    id: z.string().openapi({
      example: '123',
    }),
    name: z.string().openapi({
      example: 'John Doe',
    }),
    age: z.number().openapi({
      example: 42,
    }),
  })
  .openapi('User')


const route = createRoute({
  method: 'get',
  path: '/users/{id}',
  request: {
    params: ParamsSchema,
  },
  responses: {
    200: {
      content: {
        'application/json': {
          schema: UserSchema,
        },
      },
      description: 'Retrieve the user',
    },
  },
})

const app = new OpenAPIHono()

app.openapi(route, (c) => {
  const { id } = c.req.valid('param')
  return c.json({
    id,
    age: 20,
    name: 'Ultra-man',
  })
})

// The OpenAPI documentation will be available at /doc
app.doc('/doc', {
  openapi: '3.0.0',
  info: {
    version: '1.0.0',
    title: 'My API',
  },
})

export default app
 
Try running the app locally and visiting
http://localhost:8787/users/123123
http://localhost:8787/doc

Create a swagger page =>

Given the OpenAPI Spec, you can create a swagger page for your app ->
https://hono.dev/snippets/swagger-ui

- app.get('/ui', swaggerUI({ url: '/doc' }))
 
Try visiting http://localhost:8787/ui

----

Auto generated clients =>

- Given you have a yaml/json file that describes the shape of your routes, lets try generating a ts client that we can use in a Node.js / React app to talk to the backend

- Ref https://www.npmjs.com/package/openapi-typescript-codegen

- Store the OpenAPI Spec in a file (spec.json)

{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "My API"
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "age": {
            "type": "number",
            "example": 42
          }
        },
        "required": [
          "id",
          "name",
          "age"
        ]
      }
    },
    "parameters": {

    }
  },
  "paths": {
    "/users/{id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 3,
              "example": "1212121"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    }
  }
}

Generate the client =>
    - npx openapi-typescript-codegen --input ./spec.json --output ./generated

Explore the client
    - cd generated
    - cat index.ts

Use it in a different project

-----------
paths => all the routes
schemas => all of the shapes of the i/p, o/p that we want extracted out, so that we can re-use them in various paths.

minimal implementation logic:

In any process (whether node.js, golang, rust etc) we can interact with the endpoint with minimum lines of code.

C++, Rust, Node / any Program ---> OpenAPISpec File --> Hono HTTP Server (Any HTTP server) => program talk to HTTP server, given the openapispec file.

Given the openapispec file, we can automatically generate a client(a library kind of thing where the logic is being written to communicate with the server) and now we just have to call a function from our program to talk to the server.

We have to parse the openapispec file and automatically generate a client library.

-------

we can create a new node project and then write the logic inside it to talk to server.

```
import { DefaultService } from "../generated";

const response = await DefaultService.getUsers("1");
```

--------

OpenAPI spec file ---> Document Generation => so that everytime the endpoints change, we just have to update the openapispec file and rebuild the client and a consumer (user / ai) can understand and interact with the remote service with minimal implementation logic. we can update the openapispec file and autogenerate a client so that the consumer can use it to talk to server.

why? 
  - Making autonomous systems understand the UI 
  - Automatic Client Generation 
  - Exposing your backends to the world 

tsoa page => https://tsoa-community.github.io/docs/getting-started.html

tsoa under the hood uses express, we have added the Decorators, so tsoa kicks in and convert the verbose code into routes.ts file. Everytime we update or add routes in service file we need to run `yarn run tsoa routes` (generate express routes file) to generate `routes.ts` file again.

yarn run tsc --outDir build --experimentalDecorators => to build. (ts to js files) - every time you change any file you need to rebuild again.

node build/src/server.js => run backend server

yarn run tsoa spec => create a spec file - swagger.json

we can import it into postman and check => import -> raw text -> paste the json file content -> import

Generate Swagger Page ->

yarn add swagger-ui-express
yarn add -D @types/swagger-ui-express


to generate client =>

npx openapi-typescript-codegen --input ./build/swagger.json --output node-client -c fetch

npx openapi-typescript-codegen --input <path to swagger.json file> --output <destination_folder> -c <underlying library used to fetch>

The consumer can just simply use the client from our Frontend to call a function to talk to the server. They don't have to worry about writing the entire logic. That part has been handled / abstracted by the client. This client has been generated from our open api spec file only.

We can create multiple clients for golang, rust etc from this single file.

We can also provide more description about the controller by adding comments inside the controller. /** */ -> putting comments inside this block -> then run `yarn run tsoa spec` to generate spec file. This will help AI to understand better what the controller does.

The generation of node client happens on the server, we can use it anywhere on client / server.

"experimentalDecorators": true -> tsconfig change so that we don't see errors while using Decorators.